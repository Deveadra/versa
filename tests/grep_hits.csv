file,line,issue,match,snippet
README.md,105,print debug,print(,"le query: ```python kg = KGStore(SQLiteConn(""./ultron.db"")) print(kg.query_relations(""Alice"")) # → [(""Alice"", ""has_sibling"", """
base/agents/orchestrator.py,93,print debug,print(,"rrule_from_phrase(phrase)         if not rrule:             print(""[Calendar] Could not parse recurrence phrase."")            "
base/core/audio.py,13,print debug,print(,"l_silence(threshold=0.01, timeout=8, samplerate=16000):     print(""[Listening...]"")     wav_path = ""input.wav""     buffer = []"
base/core/audio.py,54,print debug,print(," True     ack = pick_ack(""stop"")     stream_speak(ack)  # 💡 print(""DEBUG PICOVOICE KEY:"", os.getenv(""PICOVOICE_API_KEY""))  def"
base/core/audio.py,69,api_key_leak,API_KEY='your_key_here==',"n quotes in the .env file like:\n\n""             ""PICOVOICE_API_KEY='your_key_here=='""         )      try:         porcupine = create(           "
base/core/audio.py,78,print debug,print(,"PI_KEY""),             keywords=[""jarvis""]         )         print(""[DEBUG] Porcupine initialized successfully."")          pa ="
base/core/audio.py,82,print debug,print(,"ngth, channels=1, dtype=""int16"")         pa.start()         print(""[Idle... say 'Jarvis' to wake me up.]"")         while state"
base/devices/home_assistant.py,29,requests_without_timeout,requests.get(,"lication/json""}               def health(self):         r = requests.get(f""{self.base}/api/"", headers=self.h, timeout=10)         r.r"
base/devices/home_assistant.py,34,requests_without_timeout,requests.get(,"ning.""      # def get_state(self, entity_id):     #     r = requests.get(f""{self.base}/api/states/{entity_id}"", headers=self.h, timeo"
base/devices/home_assistant.py,39,requests_without_timeout,requests.post(," def call_service(self, domain, service, data):         r = requests.post(f""{self.base}/api/services/{domain}/{service}"",             "
base/devices/home_assistant.py,58,requests_without_timeout,requests.post(,"t(url, headers=self.headers, json=data)     #         # r = requests.post(url, headers=headers, json=data or {})     #         r.raise"
base/devices/home_assistant.py,70,requests_without_timeout,requests.get(,"):         url = f""{HA_URL}/states/{entity_id}""         r = requests.get(url, headers=headers)         if r.status_code == 200:      "
base/io/run_voice.py,8,print debug,print(,":     orch = Orchestrator()     orch.ingest_bootstrap()     print(""Ultron (voice) ready. Say 'exit' to quit."")      try:      "
base/io/run_voice.py,17,print debug,print(,"           if not msg:                 continue             print(""You:"", msg)              if msg.lower() in {""exit"", ""quit""}"
base/io/stream_loop.py,3,print debug,print(," def run_stream(orch):   print(""⚠️ Streaming STT/TTS not yet implemented. Falling back to t"
base/io/text_loop.py,3,print debug,print(," def run_text(orch):   print(""Ultron (text) ready. Type 'exit' to quit. Commands: facts, "
base/io/text_loop.py,12,print debug,print(,"""facts"":       for k, v in orch.store.list_facts():         print(f"" - {k}: {v}"")       continue       if msg.lower().startswi"
base/io/text_loop.py,19,print debug,print(,"g.split("" "", 1)[1]       n = orch.store.forget(topic)       print(f""Ultron: forgot {n} entries containing '{topic}'."")       c"
base/io/text_loop.py,28,print debug,print(,"elations:         for src, rel, tgt in relations:           print(f""Ultron KG: {src} —[{rel}]→ {tgt}"")       else:         pri"
base/io/text_loop.py,30,print debug,print(,"nt(f""Ultron KG: {src} —[{rel}]→ {tgt}"")       else:         print(f""Ultron KG: no relations found for '{entity}'."")       cont"
base/io/text_loop.py,35,print debug,print(,"ity}'."")       continue     reply = orch.handle_user(msg)   print(""Ultron:"", reply)"
base/io/voice.py,17,print debug,print(," """"""Record from microphone and save to wav temp file""""""     print(""🎙️ Recording... speak now"")     audio = sd.rec(int(duration"
base/io/voice.py,35,print debug,print(,"ngs.eleven_api_key or not settings.eleven_voice_id:         print(""Ultron (text):"", text)         return     client = ElevenLa"
base/io/voice_loop.py,6,print debug,print(,"rt record_audio, transcribe, speak   def run_voice(orch):   print(""Ultron (voice) ready. Say 'exit' to quit."")   while True:  "
base/io/voice_loop.py,12,print debug,print(,"  msg = transcribe(path)     if not msg:       continue     print(""You:"", msg)       if msg.lower() in {""exit"", ""quit""}:      "
base/kg/store.py,113,print debug,print(,"pe != expected_src or tgt_type != expected_tgt:             print(f""[KG WARNING] Invalid relation: {src_type} -[{canonical}]->"
base/plugins/media_smart_home.py,52,requests_without_timeout,requests.get(,"your_phone""):     url = f""{HA_URL}/states/{entity}""     r = requests.get(url, headers=headers)     if r.status_code == 200:         r"
base/plugins/media_smart_home.py,75,requests_without_timeout,requests.post(,"d else {}     if data:         payload.update(data)     r = requests.post(url, headers=headers, json=payload)     return r.status_code"
main.py,59,print debug,print(,"ences"", ""settings""], flow=True)   state = JarvisState.IDLE  print(f""[Jarvis initialized with base personality: {BASE_PERSONALI"
main.py,60,print debug,print(," with base personality: {BASE_PERSONALITY}, mode: {MODE}]"") print(os.getenv(""PICOVOICE_API_KEY""))   # ===================== Pr"
main.py,73,requests_without_timeout,requests.get(," try:         url = f""{HA_URL}/states/{entity}""         r = requests.get(url, headers=headers)         if r.status_code == 200:      "
main.py,120,print debug,print(,"         reset_session()                 break              print(f""You: {text}"")              # 🧠 Natural mode switching     "
main.py,127,print debug,print(," = load_personality(BASE_PERSONALITY, MODE)                 print(f""[Mode switched to {MODE}]"")              # When speaking s"
main.py,171,print debug,print(,"ly or spoken:                 if reply:                     print(f""{BASE_PERSONALITY.capitalize()}: {reply}"")                "
main.py,180,print debug,print(," recall_context = format_memories(memories)                 print(""[Recall injected]:"")                 print(recall_context) "
main.py,181,print debug,print(,"                print(""[Recall injected]:"")                 print(recall_context)                 # Prepend to conversation so"
main.py,189,print debug,print(,"k_jarvis_stream(text)             if reply:                 print(f""{BASE_PERSONALITY.capitalize()}: {reply}"")                "
main_original.py,110,print debug,print(,"l_silence(threshold=0.01, timeout=8, samplerate=16000):     print(""[Listening...]"")     wav_path = ""input.wav""     buffer = []"
main_original.py,206,print debug,print(,"              channels=1, dtype=""int16"")     pa.start()     print(""[Idle... say 'Jarvis' to wake me up.]"")     while state == "
main_original.py,225,print debug,print(,"DLE             reset_session()             return          print(f""You: {text}"")          # Personality switching commands   "
main_original.py,250,print debug,print(,"ply = ask_jarvis_stream(text)         if reply:             print(f""Jarvis: {reply}"")  # === Main Loop === while True:     if "
main_original.py,261,print debug,print(,"ak(wake_ack)         reset_session()         active_mode()  print(""[Session ended.]"") "
run.py,12,print debug,print(,":     orch = Orchestrator()     orch.ingest_bootstrap()     print(""Ultron ready. Type 'exit' to quit. Commands: facts, forget "
run.py,24,print debug,print(,"   for k, v in orch.store.list_facts():                     print(f"" - {k}: {v}"")                 continue              # Forg"
run.py,31,print debug,print(,"               n = orch.store.forget(topic)                 print(f""Ultron: forgot {n} entries containing '{topic}'."")        "
run.py,40,print debug,print(,"    for src, rel, tgt in relations:                         print(f""Ultron KG: {src} —[{rel}]→ {tgt}"")                 else:  "
run.py,42,print debug,print(,"—[{rel}]→ {tgt}"")                 else:                     print(f""Ultron KG: no relations found for '{entity}'."")           "
run.py,47,print debug,print(,"chat)             reply = orch.handle_user(msg)             print(""Ultron:"", reply)     finally:         orch.shutdown()"
tests/test_scoring.py,5,asserts,assert," import assess_importance  def test_importance_basic():     assert assess_importance(""remember this: my sister is Alice"") >= 5"
tests/test_scoring.py,6,asserts,assert,"s_importance(""remember this: my sister is Alice"") >= 50     assert assess_importance(""hello"") < 25"
tests/test_store.py,10,asserts,assert,"er_name"", ""Alice"")     facts = dict(store.list_facts())     assert facts[""sister_name""] == ""Alice""     rid = store.add_event("""
tests/test_store.py,12,asserts,assert," ""Alice""     rid = store.add_event(""Met Alice at cafe"")     assert isinstance(rid, int)"
